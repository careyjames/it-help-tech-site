name: Quality Assurance

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-assurance:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install npm dependencies
        run: npm install

      - name: Install Zola
        uses: taiki-e/install-action@cargo-binstall
        with:
          tool: zola

      - name: Build site with Zola
        run: |
          zola build
          if [ ! -d "public" ]; then
            echo "❌ Build failed - public directory not created"
            exit 1
          fi

      - name: Purge unused CSS
        run: |
          npx purgecss --css public/css/*.css --content public/**/*.html --output public/css/ --safelist "phone-line"
          
      - name: Copy static assets
        run: ./scripts/copy-assets.sh

      - name: Run Accessibility Tests
        id: accessibility
        run: |
          # Set up cleanup trap for accessibility tests
          cleanup_accessibility() {
            if [ ! -z "$ACCESSIBILITY_SERVER_PID" ]; then
              kill $ACCESSIBILITY_SERVER_PID 2>/dev/null || true
              echo "🧹 Accessibility server cleaned up"
            fi
          }
          trap cleanup_accessibility EXIT INT TERM
          
          # Start HTTP server for accessibility testing
          echo "🚀 Starting server for accessibility tests..."
          npx http-server public -p 8081 -s &
          ACCESSIBILITY_SERVER_PID=$!
          
          # Wait for server with timeout
          echo "⏳ Waiting for accessibility server to start..."
          for i in {1..10}; do
            if curl -s http://localhost:8081/ > /dev/null 2>&1; then
              echo "✅ Accessibility server is ready"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Accessibility server failed to start"
              exit 1
            fi
            sleep 1
          done
          
          # Run accessibility tests
          echo "♿ Running WCAG 2.2 AA compliance tests..."
          if ./scripts/accessibility-test.sh; then
            echo "✅ Accessibility compliance passed"
            echo "ACCESSIBILITY_STATUS=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Accessibility compliance failed - PR blocked"
            echo "ACCESSIBILITY_STATUS=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Run Security Tests
        id: security
        run: |
          # Set up cleanup trap for security tests
          cleanup_security() {
            if [ ! -z "$SECURITY_SERVER_PID" ]; then
              kill $SECURITY_SERVER_PID 2>/dev/null || true
              echo "🧹 Security server cleaned up"
            fi
          }
          trap cleanup_security EXIT INT TERM
          
          # Start HTTP server for security testing
          echo "🚀 Starting server for security tests..."
          npx http-server public -p 8082 -s &
          SECURITY_SERVER_PID=$!
          
          # Wait for server with timeout
          echo "⏳ Waiting for security server to start..."
          for i in {1..10}; do
            if curl -s http://localhost:8082/ > /dev/null 2>&1; then
              echo "✅ Security server is ready"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Security server failed to start"
              exit 1
            fi
            sleep 1
          done
          
          # Run security tests
          echo "🔒 Running security compliance tests..."
          if ./scripts/security-test.sh; then
            echo "✅ Security compliance passed"
            echo "SECURITY_STATUS=passed" >> $GITHUB_OUTPUT
          else
            echo "❌ Security compliance failed - PR blocked"
            echo "SECURITY_STATUS=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Run Lighthouse CI Performance Check
        id: lighthouse
        run: |
          # Set up cleanup trap
          cleanup() {
            if [ ! -z "$SERVER_PID" ]; then
              kill $SERVER_PID 2>/dev/null || true
              echo "🧹 Server cleaned up"
            fi
          }
          trap cleanup EXIT INT TERM
          
          # Start HTTP server
          echo "🚀 Starting server..."
          npx http-server public -p 8080 -s &
          SERVER_PID=$!
          
          # Wait for server with timeout
          echo "⏳ Waiting for server to start..."
          for i in {1..10}; do
            if curl -s http://localhost:8080/ > /dev/null 2>&1; then
              echo "✅ Server is ready"
              break
            fi
            if [ $i -eq 10 ]; then
              echo "❌ Server failed to start"
              exit 1
            fi
            sleep 1
          done
          
          # Run Lighthouse with better error handling
          echo "🔍 Running Lighthouse CI..."
          if npx lhci autorun --config=.lighthouserc.js; then
            echo "✅ Performance gates passed"
          else
            echo "❌ Performance gates failed - PR blocked"
            exit 1
          fi
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.event.pull_request.head.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: ${{ github.event.pull_request.updated_at }}

      - name: Generate Quality Assurance Summary
        if: always()
        id: qa-summary
        run: |
          # Start building the comprehensive QA report
          echo "## 🛡️ Quality Assurance Results" > qa-summary.md
          echo "" >> qa-summary.md
          
          # Add overall status
          OVERALL_SUCCESS=true
          if [ "${{ steps.accessibility.outcome }}" != "success" ] || [ "${{ steps.security.outcome }}" != "success" ] || [ "${{ steps.lighthouse.outcome }}" != "success" ]; then
            OVERALL_SUCCESS=false
          fi
          
          if [ "$OVERALL_SUCCESS" = true ]; then
            echo "✅ **All quality gates passed!** This PR meets all performance, accessibility, and security standards." >> qa-summary.md
          else
            echo "❌ **Quality gates failed** - Some requirements were not met. Please review the detailed results below." >> qa-summary.md
          fi
          echo "" >> qa-summary.md
          
          # Add Accessibility Results
          echo "### ♿ Accessibility (WCAG 2.2 AA)" >> qa-summary.md
          if [ "${{ steps.accessibility.outcome }}" = "success" ]; then
            echo "✅ **PASSED** - All accessibility tests passed" >> qa-summary.md
            echo "- axe-core: No violations detected" >> qa-summary.md
            echo "- Pa11y: WCAG 2.2 AA compliance verified" >> qa-summary.md
          else
            echo "❌ **FAILED** - Accessibility issues detected" >> qa-summary.md
            echo "- Review accessibility reports in workflow artifacts" >> qa-summary.md
            echo "- Run \`npm run accessibility\` locally to debug" >> qa-summary.md
          fi
          echo "" >> qa-summary.md
          
          # Add Security Results
          echo "### 🔒 Security" >> qa-summary.md
          if [ "${{ steps.security.outcome }}" = "success" ]; then
            echo "✅ **PASSED** - Security checks passed" >> qa-summary.md
            echo "- Security headers properly configured" >> qa-summary.md
            echo "- No baseline security issues detected" >> qa-summary.md
          else
            echo "❌ **FAILED** - Security issues detected" >> qa-summary.md
            echo "- Review security reports in workflow artifacts" >> qa-summary.md
            echo "- Run \`npm run security\` locally to debug" >> qa-summary.md
          fi
          echo "" >> qa-summary.md

          # Add Lighthouse results section
          echo "### 🚀 Performance (Lighthouse)" >> qa-summary.md
          if [ -d ".lighthouseci" ]; then
            # Find the latest results
            RESULTS_DIR=$(find .lighthouseci -name "lhr-*.json" | head -1)
            if [ -n "$RESULTS_DIR" ]; then
              # Extract key metrics for summary
              echo "LIGHTHOUSE_RESULTS_FOUND=true" >> $GITHUB_OUTPUT
              if [ "${{ steps.lighthouse.outcome }}" = "success" ]; then
                echo "✅ **PASSED** - All performance gates passed" >> qa-summary.md
                echo "- Performance: ≥85 ✅" >> qa-summary.md
                echo "- Best Practices: ≥90 ✅" >> qa-summary.md
                echo "- SEO: ≥90 ✅" >> qa-summary.md
                echo "- LCP: <3.0s ✅" >> qa-summary.md
                echo "- CLS: <0.2 ✅" >> qa-summary.md
              else
                echo "❌ **FAILED** - Performance requirements not met" >> qa-summary.md
                echo "" >> qa-summary.md
                echo "**Required thresholds:**" >> qa-summary.md
                echo "- Performance: ≥85" >> qa-summary.md
                echo "- Best Practices: ≥90" >> qa-summary.md
                echo "- SEO: ≥90" >> qa-summary.md
                echo "- LCP: <3.0s" >> qa-summary.md
                echo "- CLS: <0.2" >> qa-summary.md
                echo "" >> qa-summary.md
                echo "💡 **Tips:** Run \`npm run lighthouse\` locally to test" >> qa-summary.md
              fi
            else
              echo "LIGHTHOUSE_RESULTS_FOUND=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "LIGHTHOUSE_RESULTS_FOUND=false" >> $GITHUB_OUTPUT
          fi
          
          echo "" >> qa-summary.md
          echo "---" >> qa-summary.md
          echo "📊 **Pages tested:** Homepage, Services, Billing, About, Blog" >> qa-summary.md
          echo "🛠️ **Local testing:** \`npm run quality\` runs all checks" >> qa-summary.md

      - name: Comment PR with Quality Assurance Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('qa-summary.md', 'utf8');

              // Find existing QA comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });

              const existingComment = comments.find(comment =>
                comment.body.includes('🛡️ Quality Assurance Results')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: summary
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: summary
                });
              }
            } catch (error) {
              console.log('Could not post QA comment:', error);
            }

      - name: Upload Quality Assurance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-reports
          path: |
            .lighthouseci/
            .accessibility-results/
            .security-results/
            qa-summary.md
          retention-days: 30

